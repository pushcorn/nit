test.method ("classconfigurators.AddPlugin", "configure")
    .should ("add a plugin to the specified class")
        .up (s => s.UserPlugin = nit.defineClass ("UserPlugin"))
        .up (s => s.UpdateField = nit.defineClass ("UpdateField", "UserPlugin"))
        .up (s => s.User = nit.defineClass ("User")
            .registerPlugin ("UserPlugin")
        )
        .up (s => s.createArgs = ["User", "UpdateField", "userplugins"])
        .up (s => s.args = s.User)
        .returnsInstanceOf (Function)
        .expectingPropertyToBe ("User.userplugins.length", 1)
        .commit ()

    .reset ()
        .up (s => s.DeleteField = nit.defineClass ("userplugins.DeleteField", "UserPlugin"))
        .up (s => s.createArgs = ["User", "userplugins.DeleteField"])
        .up (s => s.args = s.User)
        .returnsInstanceOf (Function)
        .expectingPropertyToBe ("User.userplugins.length", 2)
        .commit ()

    .should ("throw if the plugin type was not registered")
        .up (s => s.DeleteField = nit.defineClass ("DeleteField", "UserPlugin"))
        .up (s => s.createArgs = ["User", "DeleteField"])
        .up (s => s.args = s.User)
        .throws ("error.unregistered_plugin")
        .commit ()
;
