test.object ("nit.Date")
    .should ("throw if the given date is an invalid string")
        .given ("ABCD")
        .throws ("error.invalid_date")
        .commit ()

    .should ("parse the valid date string into a date object")
        .given ("2023-03-12 02:00:00", "America/Indianapolis")
        .returnsInstanceOf ("nit.Date")
        .expectingPropertyToBeOfType ("result.date", "Date")
        .expectingMethodToReturnValue ("result.date.toISOString", null, "2023-03-12T07:00:00.000Z")
        .commit ()

    .reset ()
        .up (s => s.Humanize = nit.require ("nit.utils.Humanize"))
        .given ("2023-09-08 21:11:22", "America/Indianapolis")
        .after (s => s.date2 = new s.class ("2023-09-09 09:20:00", "Asia/Taipei"))
        .expectingExprToReturnValue ("Humanize.duration (date2.date - result.date)", "8 minutes and 38 seconds")
        .commit ()

    .should ("accept an instance of nit.Date")
        .given (nit.new ("nit.Date", "2023-03-12 02:00:00", "America/Indianapolis"))
        .returnsInstanceOf ("nit.Date")
        .expectingPropertyToBeOfType ("result.date", "Date")
        .expectingMethodToReturnValue ("result.date.toISOString", null, "2023-03-12T07:00:00.000Z")
        .commit ()

    .should ("accept a valid date object")
        .given (new Date (Date.UTC (2023, 2, 12, 7, 12, 13, 245)), "America/Indianapolis")
        .returnsInstanceOf ("nit.Date")
        .expectingMethodToReturnValue ("result.toTimestamp", null, "2023-03-12T03:12:13.245-04:00")
        .expectingPropertyToBeOfType ("result.date", "Date")
        .expectingMethodToReturnValue ("result.date.toISOString", null, "2023-03-12T07:12:13.245Z")
        .expectingMethodToReturnValue ("result.getDate", null, 12)
        .expectingMethodToReturnValue ("result.getDay", null, 0)
        .expectingMethodToReturnValue ("result.getFullYear", null, 2023)
        .expectingMethodToReturnValue ("result.getHours", null, 3)
        .expectingMethodToReturnValue ("result.getMilliseconds", null, 245)
        .expectingMethodToReturnValue ("result.getMinutes", null, 12)
        .expectingMethodToReturnValue ("result.getMonth", null, 2)
        .expectingMethodToReturnValue ("result.getSeconds", null, 13)
        .expectingMethodToReturnValue ("result.getTime", null, 1678605133245)
        .expectingMethodToReturnValue ("result.getTimezoneOffset", null, 240)
        .expectingMethodToReturnValue ("result.getUTCDate", null, 12)
        .expectingMethodToReturnValue ("result.getUTCDay", null, 0)
        .expectingMethodToReturnValue ("result.getUTCFullYear", null, 2023)
        .expectingMethodToReturnValue ("result.getUTCHours", null, 7)
        .expectingMethodToReturnValue ("result.getUTCMilliseconds", null, 245)
        .expectingMethodToReturnValue ("result.getUTCMinutes", null, 12)
        .expectingMethodToReturnValue ("result.getUTCMonth", null, 2)
        .expectingMethodToReturnValue ("result.getUTCSeconds", null, 13)
        .expectingMethodToReturnValue ("result.setDate", 60, 1682752333245)
        .expectingMethodToReturnValue ("result.setFullYear", 2024, 1714374733245)
        .expectingMethodToReturnValue ("result.setFullYear", 2024, 1714374733245)
        .expectingMethodToReturnValue ("result.setHours", 30, 1714471933245)
        .expectingMethodToReturnValue ("result.setMilliseconds", 1234, 1714471934234)
        .expectingMethodToReturnValue ("result.setMinutes", 78, 1714475894234)
        .expectingMethodToReturnValue ("result.setMonth", 14, 1743333494234)
        .expectingMethodToReturnValue ("result.setSeconds", 77, 1743333557234)
        .expectingMethodToReturnValue ("result.date.toISOString", null, "2025-03-30T11:19:17.234Z")
        .expectingMethodToReturnValue ("result.setTime", 1743333556934, 1743333556934)
        .expectingMethodToReturnValue ("result.setUTCDate", 11, 1741691956934)
        .expectingMethodToReturnValue ("result.setUTCFullYear", 2023, 1678533556934)
        .expectingMethodToReturnValue ("result.setUTCHours", 18, 1678558756934)
        .expectingMethodToReturnValue ("result.setUTCMilliseconds", 999, 1678558756999)
        .expectingMethodToReturnValue ("result.setUTCMinutes", 999, 1678617556999)
        .expectingMethodToReturnValue ("result.setUTCMonth", 99, 1933756756999)
        .expectingMethodToReturnValue ("result.setUTCSeconds", 99, 1933756839999)
        .commit ()

    .should ("accept a valid date object")
        .given (new Date (Date.UTC (2022, 11, 31, 20, 12, 13, 245)), "Asia/Taipei")
        .returnsInstanceOf ("nit.Date")
        .expectingMethodToReturnValue ("result.toDateString", null, "Sun Jan 01 2023")
        .expectingMethodToReturnValue ("result.toGMTString", null, "Sat, 31 Dec 2022 20:12:13 GMT")
        .expectingMethodToReturnValue ("result.toISOString", null, "2022-12-31T20:12:13.245Z")
        .expectingMethodToReturnValue ("result.toJSON", null, "2022-12-31T20:12:13.245Z")
        .expectingMethodToReturnValue ("result.toLocaleDateString", null, "1/1/2023")
        .expectingMethodToReturnValue ("result.toLocaleTimeString", null, "4:12:13 AM")
        .expectingMethodToReturnValue ("result.toTimeString", null, "04:12:13 GMT+0800 (Taipei Standard Time)")
        .expectingMethodToReturnValue ("result.toUTCString", null, "Sat, 31 Dec 2022 20:12:13 GMT")
        .commit ()

    .should ("accept an integer timestamp")
        .given (Date.UTC (2022, 11, 31, 11, 12, 13, 245), "Asia/Taipei")
        .returnsInstanceOf ("nit.Date")
        .expectingMethodToReturnValue ("result.toDateString", null, "Sat Dec 31 2022")
        .expectingMethodToReturnValue ("result.valueOf", null, 1672485133245)
        .expectingMethodToReturnValue ("result.toString", null, "Sat Dec 31 2022 19:12:13 GMT+0800 (Taipei Standard Time)")
        .expectingExprToReturnValue ("result * 1", 1672485133245)
        .commit ()

    .should ("use the current time if the date was not given")
        .given ({ timezone: "Asia/Taipei" })
        .before (s => s.now = new Date ())
        .returnsInstanceOf ("nit.Date")
        .expecting ("the date is set to the current time", true, function (s)
        {
            let diff = s.now - s.result.date;

            return diff <= 10;
        })
        .commit ()
;
